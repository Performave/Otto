{"remainingRequest":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/index.js??ref--1-1!/Volumes/MacOS/GitHub/Otto/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Volumes/MacOS/GitHub/Otto/core_concepts/typography.md?vue&type=template&id=62b93cc8&","dependencies":[{"path":"/Volumes/MacOS/GitHub/Otto/core_concepts/typography.md","mtime":1624229246558},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ0eXBvZ3JhcGh5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0eXBvZ3JhcGh5IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUeXBvZ3JhcGh5IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlR5cG9ncmFwaHkgaXMgY3J1Y2lhbCB3aGVuIGRlc2lnbmluZyBhIHdlYnNpdGUuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSXQncyByZWFsbHkgZWFzeSB0byBjaG9vc2UgYSBjb2xvciB0aGF0IGxvb2tzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJub3QgZ3JlYXQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYW5kIGNob29zZSBhbiBpbmNvcnJlY3QgZm9udCBzaXplLCB3aGljaCBtYWtlcyBpdCBoYXJkIGZvciB2aXNpdG9ycyB0byB1bmRlcnN0YW5kIHRoZSB2aXN1YWwgaGllcmFyY2h5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogInRleHQtdHlwZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3RleHQtdHlwZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRleHQgdHlwZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlR5cGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiU2l6ZSAocGl4ZWxzKSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJDb2xvciAoaGV4KSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJGb250IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlVzZXMiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiSGVhZGluZyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCI0MCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIjREMyNjI2IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk1hbnJvcGUgQm9sZCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJQYWdlIG5hbWUgT05MWSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIlN1YmhlYWRpbmciKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiNDAiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiIzAwMDAwMCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJNYW5yb3BlIFJlZ3VsYXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJPcmdhbml6aW5nIGNvbnRlbnQgKGNvbnRhY3QgaW5mbywgc3VibWlzc2lvbiwgcmVxdWlyZW1lbnRzLCBldGMpIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIlN1Yi1zdWIgaGVhZGluZyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIzMCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIjMDAwMDAwIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk1hbnJvcGUgUmVndWxhciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJ0ZvciBpbmZvcm1hdGlvbiB0aGF0IGNhbiBiZSBncm91cGVkIHRvZ2V0aGVyIHVuZGVyIGEgc3ViaGVhZGluZyAoc2VlIHRoZSBzZWNvbmQgImdvb2QiIGV4YW1wbGUpJwogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIlBhcmFncmFwaCBUZXh0IChub3JtYWwpIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIjE2IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiMyQjJFMzgiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTWFucm9wZSBSZWd1bGFyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVXN1YWxseSBnb2VzIGJlbG93IGhlYWRpbmdzLCBzdWJoZWFkaW5ncywgYW5kIHN1Yi1zdWIgaGVhZGluZ3MiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIGRhbmdlciIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiSEFMVCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIkRvIG5vdCB1c2UgYW55IG90aGVyIGZvbnQgb3RoZXIgdGhhbiAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJNQU5ST1BFIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoIkJ1dCBJIHdhbnQgdG8gdXNlIEFyaWFsLCBDb21pYyBTYW5zLCBUaW1lcyBOZXcgUm9tYW4sIGV0YyIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgW192bS5fdigiTm8iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImZvcm1hdHRpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Zvcm1hdHRpbmciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZvcm1hdHRpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiRm9yIGZvcm1hdHRpbmcsIEkgb25seSBhbGxvdyAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQUxJR04gTEVGVCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmb3IgRVZFUllUSElORyBiZWNhdXNlIGl0J3MgY29uc2lzdGVudCB3aXRoIHRoZSB3aG9sZSBkZXNpZ24gb2YgYWxsIHRoZSBwYWdlcywgYW5kIG1vc3QgcGVvcGxlIHJlYWQgZnJvbSBsZWZ0IHRvIHJpZ2h0IChleGNlcHQgcGVvcGxlIHdobyByZWFkIEFyYWJpYykuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiZXhhbXBsZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2V4YW1wbGVzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFeGFtcGxlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdvb2QiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dvb2QiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBHb29kIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiaHR0cHM6Ly9pbWd1ci5jb20vQ1RleDlCNC5wbmciLCBhbHQ6ICJHb29kIGV4YW1wbGUiIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiR29vZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIl4gQWJvdmUgdGhlIHRleHQgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdignIkNvbXBldGl0aXZlIEV2ZW50IEluZm9ybWF0aW9uIicpXSksCiAgICAgICAgICBfdm0uX3YoIiBoYXMgdGhlIHByb3BlcnR5IHJlZCAoI0RDMjYyNiksIGZvbnQgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWFucm9wZSBCb2xkIildKSwKICAgICAgICAgIF92bS5fdigiLCBhbmQgZm9udCBzaXplICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjQwIHBpeGVscyIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KCJCZWxvdyBpdCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCciTWlkZGxlIFNjaG9vbCInKV0pLAogICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoJyJIaWdoIFNjaG9vbCInKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXJlIHVzaW5nIGZvbnQgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWFucm9wZSBSZWd1bGFyIildKSwKICAgICAgICAgIF92bS5fdigiLCBwcm9wZXJ0eSBibGFjayAoIzAwMCksIGFuZCBmb250IHNpemUgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiNDAgcGl4ZWxzIildKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJdCdzIGVhc3kgdG8ga25vdyB3aGVyZSB0byBsb29rLCBhbmQgaXQncyBhbHNvIHZpc3VhbGx5IHBsZWFzaW5nLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL2ltZ3VyLmNvbS9GM0x3NUt3LnBuZyIsCiAgICAgICAgICAgIGFsdDogIlN1Yi1zdWIgaGVhZGluZyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiR29vZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIlRoaXMgaXMgYSBncmVhdCBleGFtcGxlIG9mIHN1Yi1zdWIgaGVhZGluZyBiZWNhdXNlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCciRWFzdGVybiBSZWdpb24gQWR2aXNvcnMiIGFuZCAiV2VzdGVybiBSZWdpb24gQWR2aXNvcnMiJykKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFyZSBiYXNpY2FsbHkgdGhlIHNhbWUgdGhpbmcsIHNvIHRoZXkgY2FuIGJlIGdyb3VwZWQgdG9nZXRoZXIgaW4gYSBzdWItc3ViIGhlYWRpbmcuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiT05MWSB1c2Ugc3ViIGhlYWRpbmcgd2hlbiBpdCdzIGNvbXBsZXRlbHkgZGlmZmVyZW50IGluZm9ybWF0aW9uIG9uIHRoZSBzYW1lIHBhZ2UhISIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiYWQtc3RheS1hd2F5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNiYWQtc3RheS1hd2F5IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCYWQgKFNUQVkgQVdBWSEhISkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICJodHRwczovL2ltZ3VyLmNvbS9yQkxnS2ZvLnBuZyIsCiAgICAgICAgICAgIGFsdDogIkJhZCB0eXBvZ3JhcGh5IGV4YW1wbGUiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayBkYW5nZXIiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIkJBRCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJeIEFib3ZlLCBhbGwgdGhlIHN1YmhlYWRpbmdzIGFuZCBoZWFkaW5nIHVzZSB0aGUgc2FtZSByZWQgY29sb3IuXG5OZXh0LCBhbGwgdGhlIHN1YiBoZWFkaW5ncyBhcmUgc21hbGwgYW5kIHRoZSBzYW1lIHNpemUgYXMgdGhlIHBhcmFncmFwaCB0ZXh0cy4gVGhpcyBpcyBiYWQgYmVjYXVzZSBpdCBjcmVhdGVzIHZlcnkgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMSVRUTEUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdmlzdWFsIGhpZXJhcmNoeSAoIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2YvZjYvTnl0cmliMTg2NC5qcGcvNDAwcHgtTnl0cmliMTg2NC5qcGciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ0cnkgcmVhZGluZyBhIG5ld3NwYXBlciBmcm9tIHRoZSAxODAwcyEiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiKS4iKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}