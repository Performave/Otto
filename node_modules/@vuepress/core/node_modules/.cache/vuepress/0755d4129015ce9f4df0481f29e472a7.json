{"remainingRequest":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/index.js??ref--1-1!/Volumes/MacOS/GitHub/Otto/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Volumes/MacOS/GitHub/Otto/core_concepts/typography.md?vue&type=template&id=62b93cc8&","dependencies":[{"path":"/Volumes/MacOS/GitHub/Otto/core_concepts/typography.md","mtime":1624222879584},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/MacOS/GitHub/Otto/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}